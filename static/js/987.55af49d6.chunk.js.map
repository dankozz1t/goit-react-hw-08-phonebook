{"version":3,"file":"static/js/987.55af49d6.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/PasswordInput/PasswordInput.module.css?0980","components/PasswordInput/PasswordInput.jsx","webpack://react-homework-template/./src/components/Section/Section.module.css?dbe8","components/Section/Section.jsx","components/Singup/inputReducer.js","components/Singup/Singup.jsx","pages/SingupPage/SingupPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"PasswordInput_btn__g7scp\"};","import React, { useState } from 'react';\n\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport { AiFillEye, AiFillEyeInvisible } from 'react-icons/ai';\n\nimport s from './PasswordInput.module.css';\n\nconst PasswordInput = ({ label, placeholder, title, onChange, password }) => {\n  const [passwordShown, setPasswordShown] = useState(false);\n\n  const handleTogglePasswordClick = () => {\n    setPasswordShown(!passwordShown);\n  };\n\n  return (\n    <Col>\n      <Form.Label htmlFor=\"password\" className=\"formLabel\">\n        {label}\n      </Form.Label>\n      <Form.Control\n        className=\"mb-2\"\n        id=\"password\"\n        placeholder={placeholder}\n        type={passwordShown ? 'text' : 'password'}\n        name=\"password\"\n        pattern=\".{7,16}\"\n        title={title}\n        value={password}\n        onChange={onChange}\n        required\n      />\n      <button\n        className={s.btn}\n        type=\"button\"\n        onClick={handleTogglePasswordClick}\n      >\n        {passwordShown ? (\n          <AiFillEyeInvisible size=\"1.4em\" title=\"Icon hide password\" />\n        ) : (\n          <AiFillEye size=\"1.4em\" title=\"Icon show password\" />\n        )}\n      </button>\n    </Col>\n  );\n};\n\nexport default PasswordInput;\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Section_title__SLHvV\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      <h1 className={s.title}>{title}</h1>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n};\n\nexport default Section;\n","const inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'name':\n      return { ...state, name: action.payload };\n\n    case 'email':\n      return { ...state, email: action.payload };\n\n    case 'password':\n      return { ...state, password: action.payload };\n\n    case 'reset':\n      return { ...action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport default inputReducer;\n","import React, { useReducer } from 'react';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { getLanguage } from 'redux/language/selectors';\n\nimport { useUserSignupMutation } from 'redux/auth/authAPI/authAPI';\nimport { toast } from 'react-toastify';\n\nimport inputReducer from './inputReducer';\nimport Loader from 'components/Loader';\n\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport PasswordInput from 'components/PasswordInput/PasswordInput';\n\nconst initialValue = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nconst Singup = () => {\n  const lang = useSelector(getLanguage, shallowEqual);\n  const [{ name, email, password }, dispatchReducer] = useReducer(\n    inputReducer,\n    initialValue\n  );\n  const [register, { isLoading }] = useUserSignupMutation();\n\n  const handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n    dispatchReducer({ type: name, payload: value });\n  };\n\n  const handleFormSubmit = async e => {\n    e.preventDefault();\n\n    if (!email || !password) {\n      return;\n    }\n\n    try {\n      await register({ name, email, password }).then(resp => {\n        resp?.error?.data?.message && toast.info(`${resp.error.data.message}`);\n        resp?.error?.data?.keyPattern?.email &&\n          toast.info(`This email address already exists`);\n      });\n\n      dispatchReducer({ type: 'reset', payload: initialValue });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <Form onSubmit={handleFormSubmit}>\n      <Row xs>\n        <Col>\n          <Form.Label htmlFor=\"name\" className=\"formLabel\">\n            {lang.singup_labelInputName}\n          </Form.Label>\n          <Form.Control\n            className=\"mb-2\"\n            id=\"name\"\n            placeholder={lang.singup_placeholderInputName}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title={lang.singup_titleInputName}\n            value={name}\n            onChange={handleInputChange}\n            required\n          />\n        </Col>\n      </Row>\n      <Row xs>\n        <Col>\n          <Form.Label htmlFor=\"email\" className=\"formLabel\">\n            {lang.singup_labelInputEmail}\n          </Form.Label>\n          <Form.Control\n            className=\"mb-2\"\n            id=\"email\"\n            placeholder={lang.singup_placeholderInputEmail}\n            type=\"email\"\n            name=\"email\"\n            pattern=\"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$\"\n            title={lang.singup_titleInputEmail}\n            value={email}\n            onChange={handleInputChange}\n            required\n          />\n        </Col>\n      </Row>\n      <Row xs>\n        <PasswordInput\n          label={lang.singup_labelInputPassword}\n          placeholder={lang.singup_placeholderInputPassword}\n          title={lang.singup_titleInputPassword}\n          onChange={handleInputChange}\n          password={password}\n        />\n      </Row>\n      <div className=\"d-grid gap-2\">\n        <Button variant=\"primary\" type=\"submit\" disabled={isLoading}>\n          {isLoading ? (\n            <Loader width=\"45\" height=\"10\" color=\"#fff\" />\n          ) : (\n            <span>{lang.btn_singup}</span>\n          )}\n        </Button>\n      </div>\n    </Form>\n  );\n};\nexport default Singup;\n","import React from 'react';\n\nimport Section from 'components/Section';\nimport Singup from 'components/Singup';\n\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { getLanguage } from 'redux/language/selectors';\n\nconst SingupPage = () => {\n  const lang = useSelector(getLanguage, shallowEqual);\n\n  return (\n    <main className=\"box mainWidth\">\n      <Section title={lang.singup_tittle}>\n        <Singup />\n      </Section>\n    </main>\n  );\n};\n\nexport default SingupPage;\n"],"names":["label","placeholder","title","onChange","password","useState","passwordShown","setPasswordShown","Col","Form","htmlFor","className","id","type","name","pattern","value","required","s","onClick","size","children","state","action","payload","email","initialValue","lang","useSelector","getLanguage","shallowEqual","useReducer","inputReducer","dispatchReducer","useUserSignupMutation","register","isLoading","handleInputChange","e","currentTarget","handleFormSubmit","preventDefault","then","resp","error","data","message","toast","keyPattern","console","log","onSubmit","Row","xs","singup_labelInputName","singup_placeholderInputName","singup_titleInputName","singup_labelInputEmail","singup_placeholderInputEmail","singup_titleInputEmail","PasswordInput","singup_labelInputPassword","singup_placeholderInputPassword","singup_titleInputPassword","Button","variant","disabled","Loader","width","height","color","btn_singup","Section","singup_tittle"],"sourceRoot":""}